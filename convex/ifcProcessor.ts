import { action } from "./_generated/server";
import { v } from "convex/values";
import { internal } from "./_generated/api";

// –ü—Ä–∏–º–µ—Ä action –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ IFC —Ñ–∞–π–ª–æ–≤
// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ThatOpen Engine

export const processIfcFile = action({
  args: {
    buildingId: v.id("buildings"),
    ifcFileId: v.id("_storage"),
  },
  handler: async (ctx, args) => {
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const fileUrl = await ctx.storage.getUrl(args.ifcFileId);
    if (!fileUrl) {
      throw new Error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ IFC —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é ThatOpen
      // 1. –ó–∞–≥—Ä—É–∑–∫–∞ IFC —Ñ–∞–π–ª–∞
      // 2. –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–¥–∞–Ω–∏—è
      // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å—Ç–µ–Ω—ã, –¥–≤–µ—Ä–∏, –æ–∫–Ω–∞ –∏ —Ç.–¥.)
      // 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      
      console.log(`üöÄ –ù–ê–ß–ê–õ–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ IFC —Ñ–∞–π–ª–∞ –¥–ª—è –∑–¥–∞–Ω–∏—è ${args.buildingId}`);
      console.log(`üìÇ URL —Ñ–∞–π–ª–∞: ${fileUrl}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ –¥–∏—Å–∫ (—Å–∏–º—É–ª—è—Ü–∏—è)
      const saveResult = await saveFileToLocalStorage(fileUrl, args.buildingId, args.ifcFileId);
      console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:`, saveResult);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      console.log(`‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ IFC —Ñ–∞–π–ª–∞...`);
      await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

      // –ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ IFC)
      const mockElements = [
        {
          elementId: "wall_001",
          name: "–ù–∞—Ä—É–∂–Ω–∞—è —Å—Ç–µ–Ω–∞",
          type: "Wall",
          category: "Structural",
          properties: {
            material: "–ö–∏—Ä–ø–∏—á",
            thickness: 250,
            height: 3000,
            area: 15.5,
          },
        },
        {
          elementId: "door_001", 
          name: "–í—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å",
          type: "Door",
          category: "Opening",
          properties: {
            width: 900,
            height: 2100,
            material: "–ú–µ—Ç–∞–ª–ª",
          },
        },
        {
          elementId: "window_001",
          name: "–û–∫–Ω–æ",
          type: "Window", 
          category: "Opening",
          properties: {
            width: 1200,
            height: 1500,
            glazing: "–î–≤–æ–π–Ω–æ–µ",
          },
        },
      ];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      console.log(`üì¶ –°–æ–∑–¥–∞–µ–º ${mockElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–¥–∞–Ω–∏—è...`);
      for (const element of mockElements) {
        console.log(`‚ûï –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç: ${element.name} (${element.type})`);
        await ctx.runMutation(internal.buildings.insertBuildingElement, {
          buildingId: args.buildingId,
          elementId: element.elementId,
          name: element.name,
          type: element.type,
          category: element.category,
          properties: element.properties,
        });
      }
      console.log(`‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –Ω–∞ "completed"
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –Ω–∞ "completed"...`);
      await ctx.runMutation(internal.buildings.updateFileStatus, {
        buildingId: args.buildingId,
        storageId: args.ifcFileId,
        status: "completed",
      });

      console.log(`üéâ –ó–ê–í–ï–†–®–ï–ù–û: IFC —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!`);
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${mockElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ`);

      return {
        success: true,
        elementsCount: mockElements.length,
        message: "IFC —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
      };

    } catch (error) {
      console.error("‚ùå –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ IFC —Ñ–∞–π–ª–∞:", error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –Ω–∞ "error"
      try {
        await ctx.runMutation(internal.buildings.updateFileStatus, {
          buildingId: args.buildingId,
          storageId: args.ifcFileId,
          status: "error",
          errorMessage: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        });
      } catch (updateError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞:", updateError);
      }
      
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å IFC —Ñ–∞–π–ª");
    }
  },
});

// –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–¥–∞–Ω–∏—è
export const createBuildingElement = action({
  args: {
    buildingId: v.id("buildings"),
    elementId: v.string(),
    name: v.string(),
    type: v.string(),
    category: v.optional(v.string()),
    properties: v.object({}),
    documentation: v.optional(v.array(v.object({
      title: v.string(),
      content: v.string(),
      fileId: v.optional(v.id("_storage")),
    }))),
  },
  handler: async (ctx, args): Promise<any> => {
    return await ctx.runMutation(internal.buildings.insertBuildingElement, args);
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–∏—Å–∫
async function saveFileToLocalStorage(fileUrl: string, buildingId: string, storageId: string) {
  try {
    const response = await fetch(fileUrl);
    const arrayBuffer = await response.arrayBuffer();
    
    const fileName = `building_${buildingId}_${storageId}.ifc`;
    const filePath = `/uploads/buildings/${buildingId}/${fileName}`;
    
    console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${arrayBuffer.byteLength} –±–∞–π—Ç`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toISOString()}`);
    
    return {
      success: true,
      filePath,
      fileSize: arrayBuffer.byteLength,
      savedAt: new Date().toISOString(),
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
    throw error;
  }
}
